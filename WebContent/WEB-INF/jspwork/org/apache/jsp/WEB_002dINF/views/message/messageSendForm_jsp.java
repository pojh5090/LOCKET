/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.38
 * Generated at: 2020-11-09 12:22:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.message;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class messageSendForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	String id = (String) request.getAttribute("userId");
	String nickname = (String) request.getAttribute("nickname");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>쪽지 보내기</title>\r\n");
      out.write("<style>\r\n");
      out.write("\tbody {\r\n");
      out.write("\tbackground: #fffcf5;\r\n");
      out.write("\t}\r\n");
      out.write("\tinput{\r\n");
      out.write("\tbackground: #fffcf5;\r\n");
      out.write("\t}\r\n");
      out.write("\ttextArea{\r\n");
      out.write("\tbackground: #fffcf5;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#btn1{\r\n");
      out.write("\t\tbackground: orange;\r\n");
      out.write("\t\tborder: 1px solid orange;\r\n");
      out.write("\t\tborder-radius: 5px;\r\n");
      out.write("\t\tfont-weight: bold;\r\n");
      out.write("\t\tcolor: white;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#btn2{\r\n");
      out.write("\t\tbackground: gray;\r\n");
      out.write("\t\tborder: 1px solid gray;\r\n");
      out.write("\t\tborder-radius: 5px;\r\n");
      out.write("\t\tfont-weight: bold;\r\n");
      out.write("\t\tcolor: white;\r\n");
      out.write("\t\twidth: 70px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t#searchUser{\r\n");
      out.write("\t\tbackground: lightgray;\r\n");
      out.write("\t\tborder: 1px solid lightgray;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body align=\"center\">\r\n");
      out.write("\t<h2>쪽지 보내기</h2>\r\n");
      out.write("\t\r\n");
      out.write("\t<form action=\"");
      out.print( request.getContextPath() );
      out.write("/insertMessage.do\" method=\"post\" id=\"sendMessage\" name=\"sendMessage\">\r\n");
      out.write("\t\t\t<b>받는 사람 :</b>\r\n");
      out.write("\t\t<input type =\"hidden\" id=\"id\" name=\"id\" ");
      out.print( id == null ? "" : "value='" + id + "'" );
      out.write(">\r\n");
      out.write("\t\t<input type ='text' id=\"nickname\" name=\"nickname\" height=\"5\" readonly=\"readonly\" ");
      out.print( nickname == null ? "" : "value='" + nickname + "'" );
      out.write(">\r\n");
      out.write("\t\t<input type =\"button\" id=\"searchUser\" size = '20' height=\"3\" value=\"찾기\" onclick=\"\">\r\n");
      out.write("\t\t<br><br>\r\n");
      out.write("\t\t<textArea name=\"content\" rows='10' cols = '60' placeholder ='내용을입력해주세요'></textArea><br><br>\r\n");
      out.write("\t\t<button id=\"btn1\" type = 'submit'>전송 하기</button>\r\n");
      out.write("\t\t<button id=\"btn2\" type = 'button' onclick='self.close();'>취소</button>\r\n");
      out.write("\t</form>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\tdocument.getElementById(\"searchUser\").onclick = function() {\r\n");
      out.write("\t\t\topenWindow();\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\r\n");
      out.write("\t\tvar openWindow = function() {\r\n");
      out.write("\t\t    var win = window.open('searchUserForm.do', 'searchUserForm', 'width=600, height=400');\r\n");
      out.write("\t\t};\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
